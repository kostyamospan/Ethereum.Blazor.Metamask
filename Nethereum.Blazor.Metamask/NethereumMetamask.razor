@using System.Threading.Tasks
@using Microsoft.JSInterop
@using Nethereum.Blazor.Metamask.Abstractions
@using Nethereum.Hex.HexTypes
@using Org.BouncyCastle.Asn1.IsisMtt.Ocsp
@inject IJSRuntime _jsRuntime;
@inject MetamaskHostProvider _metamaskHostProvider

@ChildContent

@code {
    [Parameter] public RenderFragment ChildContent { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        var dotNetObjRef = DotNetObjectReference.Create(this);
        await _jsRuntime.InvokeVoidAsync("window.SetDotnetReference", dotNetObjRef);
    }
    
    [JSInvokable("MetamaskAvailableChanged")]
    public async Task MetamaskAvailableChanged(bool available)
    {
        await _metamaskHostProvider.ChangeMetamaskAvailableAsync(available);
    }

    [JSInvokable("SelectedAccountChanged")]
    public async Task SelectedAccountChanged(string selectedAccount)
    {
        await _metamaskHostProvider.ChangeSelectedAccountAsync(selectedAccount);
    }
        
    [JSInvokable("SelectedNetworkChanged")]
    public async Task SelectedNetworkChanged(string selectedNetwork)
    {
        await _metamaskHostProvider.ChangeSelectedNetworkAsync((int)(new HexBigInteger(selectedNetwork).Value));
    }
}