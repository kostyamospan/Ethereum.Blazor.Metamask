@page "/"
@inject IEthereumHostProvider _ethereumHostProvider
@inject IJSRuntime _jsRuntime
@implements IDisposable     

@if (_selectedAccount is not null)
{
    <div>
        Selected account address: @_selectedAccount
    </div>
}

@if (_selectedChainId is not null)
{
    <div>
        Selected chainId: @_selectedChainId
    </div>
}

<div>
    Is metamask available: @_isAvailable
</div>

<div>
    Is metamask connected: @IsConnected
</div>

<button disabled="@(!_isAvailable || IsConnected)" @onclick="@OnBtnClick">
    Connect MetaMask
</button>

@code {

    private string _selectedAccount;
    private int? _selectedChainId;
    private bool _isAvailable;
    private bool _isDisposed;
    
    private bool IsConnected => _isAvailable && _selectedAccount is not null;

    protected override async Task OnInitializedAsync()
    {
        _isAvailable = await _ethereumHostProvider.IsMetamaskAvailableAsync();

        Console.WriteLine($"Is metamask available: {_isAvailable}");
        if (_isAvailable)
        {
            _selectedAccount = await _ethereumHostProvider.EnableProviderAsync();
            _selectedChainId = await _ethereumHostProvider.GetSelectedNetworkAsync();

            SubscribeOnProviderEvents();
        }
        
        StateHasChanged();
    }
    
    private async Task OnBtnClick()
    {
        _selectedAccount = await _ethereumHostProvider.EnableProviderAsync();
    }
    
    private Task OnAccountsChange(string newAccount)
    {
        _selectedAccount = newAccount;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnChainChange(int newChainId)
    {
        Console.WriteLine("Chain changed!");
        _selectedChainId = newChainId;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void UnSubscribeFromProviderEvents()
    {
        _ethereumHostProvider.SelectedAccountChanged -= OnAccountsChange;
        _ethereumHostProvider.NetworkChanged -= OnChainChange;
    }
    
    private void SubscribeOnProviderEvents()
    {
        _ethereumHostProvider.SelectedAccountChanged += OnAccountsChange;
        _ethereumHostProvider.NetworkChanged += OnChainChange;
    }

    public void Dispose()
    {
        if (_isDisposed) return;

        UnSubscribeFromProviderEvents();
        
        _isDisposed = true;
    }

}