@page "/"
@inject IEthereumHostProvider _ethereumHostProvider
@inject IJSRuntime _jsRuntime
@implements IDisposable     

@if (_selectedAccount is not null)
{
    <div>
        Selected account address: @_selectedAccount
    </div>
}

@if (_selectedChainId is not null)
{
    <div>
        Selected chainId: @_selectedChainId
    </div>
}

<div>
    Is metamask available: @_isAvailable
</div>

<div>
    Is metamask connected: @IsConnected
</div>

<button disabled="@(!_isAvailable || IsConnected)" @onclick="@OnBtnClick">
    Connect MetaMask
</button>

@code {

    private string _selectedAccount;
    private int? _selectedChainId;
    private bool _isAvailable;
    private bool _isDisposed;
    
    private bool IsConnected => _isAvailable && _selectedAccount is not null;

    protected override async Task OnInitializedAsync()
    {
        _isAvailable = await _ethereumHostProvider.IsMetamaskAvailableAsync();

        if (_isAvailable)
        {
            _selectedAccount = await _ethereumHostProvider.GetSelectedAccountAsync();
            _selectedChainId = await _ethereumHostProvider.GetSelectedNetworkAsync();

            SubscribeOnProviderEvents();
        }
        
        StateHasChanged();
    }


    private async Task OnBtnClick()
    {
        try
        {
            if (!IsConnected)
                _selectedAccount = await _ethereumHostProvider.EnableProviderAsync();
        }
        catch (Exception e)
        {
            Console.WriteLine(e);
            throw;
        }
    }

    private async Task OnAccountConnected(int chainId)
    {
        _selectedChainId = chainId;
        await  _jsRuntime.InvokeVoidAsync("alert", "Metamask successfully connected!").AsTask();
    }
    
    private Task OnAccountDisconnected()
        => _jsRuntime.InvokeVoidAsync("alert", "Account is disconneted").AsTask();
    private Task OnAccountsChange(string newAccount)
    {
        _selectedAccount = newAccount;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private Task OnChainChange(int newChainId)
    {
        _selectedChainId = newChainId;
        StateHasChanged();
        return Task.CompletedTask;
    }

    private void UnSubscribeFromProviderEvents()
    {
        _ethereumHostProvider.SelectedAccountChanged -= OnAccountsChange;
        _ethereumHostProvider.NetworkChanged -= OnChainChange;
        _ethereumHostProvider.ProviderConnected -= OnAccountConnected;
        _ethereumHostProvider.ProviderDisconnected -= OnAccountDisconnected;
    }
    
    private void SubscribeOnProviderEvents()
    {
        _ethereumHostProvider.SelectedAccountChanged += OnAccountsChange;
        _ethereumHostProvider.NetworkChanged += OnChainChange;
        _ethereumHostProvider.ProviderConnected += OnAccountConnected;
        _ethereumHostProvider.ProviderDisconnected += OnAccountDisconnected;
    }

    public void Dispose()
    {
        if (_isDisposed) return;

        UnSubscribeFromProviderEvents();
        
        _isDisposed = true;
    }

}